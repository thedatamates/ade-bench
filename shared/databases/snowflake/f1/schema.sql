CREATE TABLE circuits(circuitId INTEGER, circuitRef VARCHAR, "name" VARCHAR, "location" VARCHAR, country VARCHAR, lat DOUBLE, lng DOUBLE, alt INTEGER, url VARCHAR);;
CREATE TABLE constructors(constructorId INTEGER, constructorRef VARCHAR, "name" VARCHAR, nationality VARCHAR, url VARCHAR);;
CREATE TABLE constructor_results(constructorResultsId INTEGER, raceId INTEGER, constructorId INTEGER, points DOUBLE, status VARCHAR);;
CREATE TABLE constructor_standings(constructorStandingsId INTEGER, raceId INTEGER, constructorId INTEGER, points DOUBLE, "position" INTEGER, positionText VARCHAR, wins INTEGER);;
CREATE TABLE drivers(driverId INTEGER, driverRef VARCHAR, number INTEGER, code VARCHAR, forename VARCHAR, surname VARCHAR, dob DATE, nationality VARCHAR, url VARCHAR);;
CREATE TABLE driver_standings(driverStandingsId INTEGER, raceId INTEGER, driverId INTEGER, points DOUBLE, "position" INTEGER, positionText VARCHAR, wins INTEGER);;
CREATE TABLE lap_times(raceId INTEGER, driverId INTEGER, lap INTEGER, "position" INTEGER, "time" VARCHAR, "milliseconds" INTEGER);;
CREATE TABLE pit_stops(raceId INTEGER, driverId INTEGER, stop INTEGER, lap INTEGER, "time" VARCHAR, duration VARCHAR, "milliseconds" INTEGER);;
CREATE TABLE position_descriptions(position_text VARCHAR, position_desc VARCHAR);;
CREATE TABLE qualifying(qualifyId INTEGER, raceId INTEGER, driverId INTEGER, constructorId INTEGER, number INTEGER, "position" INTEGER, q1 VARCHAR, q2 VARCHAR, q3 VARCHAR);;
CREATE TABLE races(raceId INTEGER, "year" INTEGER, round INTEGER, circuitId INTEGER, "name" VARCHAR, date DATE, "time" VARCHAR, url VARCHAR, fp1_date DATE, fp1_time VARCHAR, fp2_date DATE, fp2_time VARCHAR, fp3_date DATE, fp3_time VARCHAR, quali_date DATE, quali_time VARCHAR, sprint_date DATE, sprint_time VARCHAR);;
CREATE TABLE results(resultId INTEGER, raceId INTEGER, driverId INTEGER, constructorId INTEGER, number INTEGER, grid INTEGER, "position" INTEGER, positionText VARCHAR, positionOrder INTEGER, points DOUBLE, laps INTEGER, "time" VARCHAR, "milliseconds" INTEGER, fastestLap INTEGER, rank INTEGER, fastestLapTime VARCHAR, fastestLapSpeed DOUBLE, statusId INTEGER);;
CREATE TABLE seasons("year" INTEGER, url VARCHAR);;
CREATE TABLE sprint_results(resultId INTEGER, raceId INTEGER, driverId INTEGER, constructorId INTEGER, number INTEGER, grid INTEGER, "position" INTEGER, positionText VARCHAR, positionOrder INTEGER, points INTEGER, laps INTEGER, "time" VARCHAR, "milliseconds" INTEGER, fastestLap INTEGER, fastestLapTime VARCHAR, statusId INTEGER);;
CREATE TABLE status(statusId INTEGER, status VARCHAR);;
CREATE VIEW constructor_fastest_laps_by_season AS WITH constructor_fastest_laps_by_season AS (SELECT c.constructor_name, r.race_year AS season, count(rs.rank) AS fastest_laps FROM f1.main.stg_f1_dataset__results AS rs INNER JOIN f1.main.stg_f1_dataset__races AS r ON ((rs.race_id = r.race_id)) INNER JOIN f1.main.stg_f1_dataset__constructors AS c ON ((rs.constructor_id = c.constructor_id)) WHERE (rs.rank = 1) GROUP BY c.constructor_name, r.race_year)SELECT constructor_name, season, fastest_laps FROM constructor_fastest_laps_by_season ORDER BY season ASC;;
CREATE VIEW constructor_podiums_by_season AS WITH constructor_podiums_by_season AS (SELECT c.constructor_name, r.race_year AS season, count(rs."position") AS podiums FROM f1.main.stg_f1_dataset__results AS rs INNER JOIN f1.main.stg_f1_dataset__races AS r ON ((rs.race_id = r.race_id)) INNER JOIN f1.main.stg_f1_dataset__constructors AS c ON ((rs.constructor_id = c.constructor_id)) WHERE (CAST(rs."position" AS INTEGER) BETWEEN 1 AND 3) GROUP BY c.constructor_name, r.race_year)SELECT constructor_name, season, podiums FROM constructor_podiums_by_season ORDER BY season ASC;;
CREATE VIEW constructor_points AS WITH constructor_points AS (SELECT c.constructor_name, r.race_year AS season, max(cs.points) AS total_points FROM f1.main.stg_f1_dataset__constructor_standings AS cs INNER JOIN f1.main.stg_f1_dataset__races AS r ON ((cs.raceId = r.race_id)) INNER JOIN f1.main.stg_f1_dataset__constructors AS c ON ((cs.constructorId = c.constructor_id)) GROUP BY c.constructor_name, r.race_year)SELECT constructor_name, season, total_points FROM constructor_points ORDER BY season ASC;;
CREATE VIEW constructor_pole_positions_by_season AS WITH constructor_pole_positions_by_season AS (SELECT c.constructor_name, r.race_year AS season, count(rs.grid) AS pole_positions FROM f1.main.stg_f1_dataset__results AS rs INNER JOIN f1.main.stg_f1_dataset__races AS r ON ((rs.race_id = r.race_id)) INNER JOIN f1.main.stg_f1_dataset__constructors AS c ON ((rs.constructor_id = c.constructor_id)) WHERE (rs.grid = 1) GROUP BY c.constructor_name, r.race_year)SELECT constructor_name, season, pole_positions FROM constructor_pole_positions_by_season ORDER BY season ASC;;
CREATE VIEW constructor_retirements_by_season AS WITH constructor_retirements_by_season AS (SELECT c.constructor_name, r.race_year AS season, count(rs.position_desc) AS retirements FROM f1.main.stg_f1_dataset__results AS rs INNER JOIN f1.main.stg_f1_dataset__races AS r ON ((rs.race_id = r.race_id)) INNER JOIN f1.main.stg_f1_dataset__constructors AS c ON ((rs.constructor_id = c.constructor_id)) WHERE (lower(rs.position_desc) = 'retired') GROUP BY c.constructor_name, r.race_year)SELECT constructor_name, season, retirements FROM constructor_retirements_by_season ORDER BY season ASC;;
CREATE VIEW constructor_wins_by_season AS WITH constructor_wins_by_season AS (SELECT c.constructor_name, r.race_year AS season, count(rs."position") AS wins FROM f1.main.stg_f1_dataset__results AS rs INNER JOIN f1.main.stg_f1_dataset__races AS r ON ((rs.race_id = r.race_id)) INNER JOIN f1.main.stg_f1_dataset__constructors AS c ON ((rs.constructor_id = c.constructor_id)) WHERE (rs."position" = 1) GROUP BY c.constructor_name, r.race_year)SELECT constructor_name, season, wins FROM constructor_wins_by_season ORDER BY season ASC;;
CREATE VIEW construtor_drivers_championships AS WITH driver_points AS (SELECT constructors.constructor_name, max(driver_standings.points) AS max_points, races.race_year AS race_year FROM f1.main.stg_f1_dataset__constructors AS constructors INNER JOIN f1.main.stg_f1_dataset__results AS results ON ((constructors.constructor_id = results.constructor_id)) INNER JOIN f1.main.stg_f1_dataset__races AS races ON ((results.race_id = races.race_id)) INNER JOIN f1.main.stg_f1_dataset__driver_standings AS driver_standings ON (((driver_standings.raceid = races.race_id) AND (driver_standings.driverid = results.driver_id))) GROUP BY constructors.constructor_name, races.race_year), constructor_driver_championships AS (SELECT *, rank() OVER (PARTITION BY race_year ORDER BY max_points DESC) AS r_rank FROM driver_points WHERE (race_year != main.date_part('year', current_date())))SELECT constructor_name, count(constructor_name) AS total_driver_championships FROM constructor_driver_championships WHERE (r_rank = 1) GROUP BY constructor_name;;
CREATE VIEW driver_fastest_laps_by_season AS WITH driver_fastest_laps_by_season AS (SELECT d.driver_full_name, r.race_year AS season, count(rs.rank) AS fastest_laps FROM f1.main.stg_f1_dataset__results AS rs INNER JOIN f1.main.stg_f1_dataset__races AS r ON ((rs.race_id = r.race_id)) INNER JOIN f1.main.stg_f1_dataset__drivers AS d ON ((rs.driver_id = d.driver_id)) WHERE (rs.rank = 1) GROUP BY d.driver_full_name, r.race_year)SELECT driver_full_name, season, fastest_laps FROM driver_fastest_laps_by_season ORDER BY season ASC;;
CREATE VIEW driver_podiums_by_season AS WITH driver_podiums_by_season AS (SELECT d.driver_full_name, r.race_year AS season, count(rs."position") AS podiums FROM f1.main.stg_f1_dataset__results AS rs INNER JOIN f1.main.stg_f1_dataset__races AS r ON ((rs.race_id = r.race_id)) INNER JOIN f1.main.stg_f1_dataset__drivers AS d ON ((rs.driver_id = d.driver_id)) WHERE (CAST(rs."position" AS INTEGER) BETWEEN 1 AND 3) GROUP BY d.driver_full_name, r.race_year)SELECT driver_full_name, season, podiums FROM driver_podiums_by_season ORDER BY season ASC;;
CREATE VIEW driver_points AS WITH driver_points AS (SELECT d.driver_full_name, r.race_year AS season, max(ds.points) AS total_points FROM f1.main.stg_f1_dataset__driver_standings AS ds INNER JOIN f1.main.stg_f1_dataset__races AS r ON ((ds.raceId = r.race_id)) INNER JOIN f1.main.stg_f1_dataset__drivers AS d ON ((ds.driverId = d.driver_id)) GROUP BY d.driver_full_name, r.race_year)SELECT driver_full_name, season, total_points FROM driver_points ORDER BY season ASC;;
CREATE VIEW driver_pole_positions_by_season AS WITH driver_pole_positions_by_season AS (SELECT d.driver_full_name, r.race_year AS season, count(rs.grid) AS pole_positions FROM f1.main.stg_f1_dataset__results AS rs INNER JOIN f1.main.stg_f1_dataset__races AS r ON ((rs.race_id = r.race_id)) INNER JOIN f1.main.stg_f1_dataset__drivers AS d ON ((rs.driver_id = d.driver_id)) WHERE (rs.grid = 1) GROUP BY d.driver_full_name, r.race_year)SELECT driver_full_name, season, pole_positions FROM driver_pole_positions_by_season ORDER BY season ASC;;
CREATE VIEW driver_retirements_by_season AS WITH driver_retirements_by_season AS (SELECT d.driver_full_name, r.race_year AS season, count(rs.position_desc) AS retirements FROM f1.main.stg_f1_dataset__results AS rs INNER JOIN f1.main.stg_f1_dataset__races AS r ON ((rs.race_id = r.race_id)) INNER JOIN f1.main.stg_f1_dataset__drivers AS d ON ((rs.driver_id = d.driver_id)) WHERE (lower(rs.position_desc) = 'retired') GROUP BY d.driver_full_name, r.race_year)SELECT driver_full_name, season, retirements FROM driver_retirements_by_season ORDER BY season ASC;;
CREATE VIEW driver_wins_by_season AS WITH driver_wins_by_season AS (SELECT d.driver_full_name, r.race_year AS season, count(rs."position") AS wins FROM f1.main.stg_f1_dataset__results AS rs INNER JOIN f1.main.stg_f1_dataset__races AS r ON ((rs.race_id = r.race_id)) INNER JOIN f1.main.stg_f1_dataset__drivers AS d ON ((rs.driver_id = d.driver_id)) WHERE (rs."position" = 1) GROUP BY d.driver_full_name, r.race_year)SELECT driver_full_name, season, wins FROM driver_wins_by_season ORDER BY season ASC;;
CREATE VIEW finishes_by_driver AS WITH drivers AS (SELECT * FROM f1.main.stg_f1_dataset__drivers), results AS (SELECT * FROM f1.main.stg_f1_dataset__results), qualifying AS (SELECT * FROM f1.main.stg_f1_dataset__qualifying), podiums AS (SELECT d.driver_id, d.driver_full_name, r.position_order, r.position_desc, r.grid AS grid_position_order, r.rank AS fastest_lap FROM results AS r INNER JOIN drivers AS d USING (driver_id)), grouped AS (SELECT driver_id, driver_full_name, count_star() AS races, count_if((position_order BETWEEN 1 AND 3)) AS podiums, count_if((grid_position_order = 1)) AS pole_positions, count_if((fastest_lap = 1)) AS fastest_laps, sum(CASE  WHEN ((position_order = 1)) THEN (1) ELSE 0 END) AS p1, sum(CASE  WHEN ((position_order = 2)) THEN (1) ELSE 0 END) AS p2, sum(CASE  WHEN ((position_order = 3)) THEN (1) ELSE 0 END) AS p3, sum(CASE  WHEN ((position_order = 4)) THEN (1) ELSE 0 END) AS p4, sum(CASE  WHEN ((position_order = 5)) THEN (1) ELSE 0 END) AS p5, sum(CASE  WHEN ((position_order = 6)) THEN (1) ELSE 0 END) AS p6, sum(CASE  WHEN ((position_order = 7)) THEN (1) ELSE 0 END) AS p7, sum(CASE  WHEN ((position_order = 8)) THEN (1) ELSE 0 END) AS p8, sum(CASE  WHEN ((position_order = 9)) THEN (1) ELSE 0 END) AS p9, sum(CASE  WHEN ((position_order = 10)) THEN (1) ELSE 0 END) AS p10, sum(CASE  WHEN ((position_order = 11)) THEN (1) ELSE 0 END) AS p11, sum(CASE  WHEN ((position_order = 12)) THEN (1) ELSE 0 END) AS p12, sum(CASE  WHEN ((position_order = 13)) THEN (1) ELSE 0 END) AS p13, sum(CASE  WHEN ((position_order = 14)) THEN (1) ELSE 0 END) AS p14, sum(CASE  WHEN ((position_order = 15)) THEN (1) ELSE 0 END) AS p15, sum(CASE  WHEN ((position_order = 16)) THEN (1) ELSE 0 END) AS p16, sum(CASE  WHEN ((position_order = 17)) THEN (1) ELSE 0 END) AS p17, sum(CASE  WHEN ((position_order = 18)) THEN (1) ELSE 0 END) AS p18, sum(CASE  WHEN ((position_order = 19)) THEN (1) ELSE 0 END) AS p19, sum(CASE  WHEN ((position_order = 20)) THEN (1) ELSE 0 END) AS p20, sum(CASE  WHEN ((position_order > 20)) THEN (1) ELSE 0 END) AS p21plus, sum(CASE  WHEN ((position_desc = 'disqualified')) THEN (1) ELSE 0 END) AS disqualified, sum(CASE  WHEN ((position_desc = 'excluded')) THEN (1) ELSE 0 END) AS excluded, sum(CASE  WHEN ((position_desc = 'failed to qualify')) THEN (1) ELSE 0 END) AS failed_to_qualify, sum(CASE  WHEN ((position_desc = 'not classified')) THEN (1) ELSE 0 END) AS not_classified, sum(CASE  WHEN ((position_desc = 'retired')) THEN (1) ELSE 0 END) AS retired, sum(CASE  WHEN ((position_desc = 'withdrew')) THEN (1) ELSE 0 END) AS withdrew FROM podiums GROUP BY 1, 2), final AS (SELECT * FROM grouped)SELECT * FROM final;;
CREATE VIEW most_laps AS WITH drivers AS (SELECT * FROM f1.main.stg_f1_dataset__drivers), lap_times AS (SELECT * FROM f1.main.stg_f1_dataset__lap_times), joined AS (SELECT d.driver_id, d.driver_full_name FROM drivers AS d INNER JOIN lap_times AS l USING (driver_id)), grouped AS (SELECT driver_id, driver_full_name, count_star() AS laps FROM joined GROUP BY 1, 2), final AS (SELECT rank() OVER (ORDER BY laps DESC) AS rank, driver_full_name, laps FROM grouped ORDER BY laps DESC LIMIT 20)SELECT * FROM final;;
CREATE VIEW most_races AS WITH drivers AS (SELECT * FROM f1.main.stg_f1_dataset__drivers), results AS (SELECT * FROM f1.main.stg_f1_dataset__results), joined AS (SELECT d.driver_id, d.driver_full_name, r.position_desc FROM results AS r INNER JOIN drivers AS d USING (driver_id)), grouped AS (SELECT driver_id, driver_full_name, sum(CASE  WHEN ((position_desc IS NULL)) THEN (1) ELSE 0 END) AS finishes, sum(CASE  WHEN ((position_desc = 'failed to qualify')) THEN (1) ELSE 0 END) AS "failed to qualify", sum(CASE  WHEN ((position_desc = 'retired')) THEN (1) ELSE 0 END) AS retired, sum(CASE  WHEN ((position_desc = 'not classified')) THEN (1) ELSE 0 END) AS "not classified", sum(CASE  WHEN ((position_desc = 'withdrew')) THEN (1) ELSE 0 END) AS withdrew, sum(CASE  WHEN ((position_desc = 'disqualified')) THEN (1) ELSE 0 END) AS disqualified, sum(CASE  WHEN ((position_desc = 'excluded')) THEN (1) ELSE 0 END) AS excluded FROM joined GROUP BY 1, 2), final AS (SELECT rank() OVER (ORDER BY finishes DESC) AS rank, driver_full_name, finishes, excluded, withdrew, "failed to qualify" AS failed_to_qualify, disqualified, "not classified" AS not_classified, retired FROM grouped ORDER BY finishes DESC LIMIT 120)SELECT * FROM final;;
CREATE VIEW oldest_race_winners_in_modern_era AS WITH races AS (SELECT * FROM f1.main.stg_f1_dataset__races), results AS (SELECT * FROM f1.main.stg_f1_dataset__results), drivers AS (SELECT * FROM f1.main.stg_f1_dataset__drivers), joined AS (SELECT * FROM results INNER JOIN races USING (race_id) INNER JOIN drivers USING (driver_id)), wins AS (SELECT driver_full_name, race_name, race_date, (main.date_part('year', race_date) - main.date_part('year', driver_date_of_birth)) AS age, is_modern_era FROM joined WHERE (position_order = 1)), final AS (SELECT driver_full_name, race_name, race_date, age FROM wins WHERE is_modern_era ORDER BY age DESC LIMIT 20)SELECT * FROM final;;
CREATE VIEW stg_f1_dataset__circuits AS WITH circuits AS (SELECT "name" AS circuit_name, lat AS latitude, lng AS longitude, alt AS alitude, circuitId AS circuit_id, country, url AS circuit_url, circuitRef AS circuit_ref, "location" AS circuit_location FROM f1.main.circuits)SELECT * FROM circuits;;
CREATE VIEW stg_f1_dataset__constructors AS WITH constructors AS (SELECT constructorId AS constructor_id, constructorRef AS constructor_ref, "name" AS constructor_name, nationality AS constructor_nationality, url AS constructor_url FROM f1.main.constructors)SELECT * FROM constructors;;
CREATE VIEW stg_f1_dataset__constructor_results AS WITH source AS (SELECT * FROM f1.main.constructor_results), renamed AS (SELECT constructorresultsid, raceid, constructorid, points, status FROM source)SELECT * FROM renamed;;
CREATE VIEW stg_f1_dataset__constructor_standings AS WITH source AS (SELECT * FROM f1.main.constructor_standings), renamed AS (SELECT constructorstandingsid, raceid, constructorid, points, "position", positiontext, wins FROM source)SELECT * FROM renamed;;
CREATE VIEW stg_f1_dataset__drivers AS WITH drivers AS (SELECT driverId AS driver_id, driverRef AS driver_ref, number AS driver_number, code AS driver_code, forename AS driver_first_name, surname AS driver_last_name, dob AS driver_date_of_birth, nationality AS driver_nationality, url AS driver_url FROM f1.main.drivers)SELECT *, concat(driver_first_name, ' ', driver_last_name) AS driver_full_name, (main.date_part('year', current_date()) - main.date_part('year', driver_date_of_birth)) AS driver_current_age FROM drivers;;
CREATE VIEW stg_f1_dataset__driver_standings AS WITH source AS (SELECT * FROM f1.main.driver_standings), renamed AS (SELECT driverstandingsid, raceid, driverid, points, "position", positiontext, wins FROM source)SELECT * FROM renamed;;
CREATE VIEW stg_f1_dataset__lap_times AS WITH lap_times AS (SELECT raceId AS race_id, driverId AS driver_id, lap, "position", "time", "milliseconds" FROM f1.main.lap_times)SELECT * FROM lap_times;;
CREATE VIEW stg_f1_dataset__pit_stops AS WITH pit_stops AS (SELECT raceId AS race_id, driverId AS driver_id, stop, lap, "time", duration, (("milliseconds" * 1.0) / 1000) AS "seconds" FROM f1.main.pit_stops)SELECT * FROM pit_stops;;
CREATE VIEW stg_f1_dataset__qualifying AS WITH source AS (SELECT * FROM f1.main.qualifying), renamed AS (SELECT qualifyid AS qualify_id, raceid AS race_id, driverid AS driver_id, constructorid AS constructor_id, number, "position", q1, q2, q3 FROM source)SELECT * FROM renamed;;
CREATE VIEW stg_f1_dataset__races AS WITH races AS (SELECT date AS race_date, round AS round_number, raceId AS race_id, circuitId AS circuit_id, "year" AS race_year, "time" AS race_time, url AS race_url, "name" AS race_name FROM f1.main.races), circuits AS (SELECT * FROM f1.main.stg_f1_dataset__circuits), final AS (SELECT r.race_date, r.round_number, r.race_id, r.race_year, r.race_time, r.race_url, r.race_name, circuit_id, c.circuit_name, c.latitude, c.longitude, c.alitude, c.country, c.circuit_url, c.circuit_ref, c.circuit_location, (r.race_date >= '1983-01-01') AS is_modern_era FROM races AS r INNER JOIN circuits AS c USING (circuit_id))SELECT * FROM final;;
CREATE VIEW stg_f1_dataset__results AS WITH results AS (SELECT statusId AS status_id, raceId AS race_id, driverId AS driver_id, constructorId AS constructor_id, resultId AS result_id, grid, positionOrder AS position_order, points, laps, fastestLapTime AS fastest_lap_time, fastestLapSpeed AS fastest_lap_speed, "time" AS lap_time, "milliseconds" AS lap_milliseconds, number AS lap_number, fastestLap AS fastest_lap, "position", positionText AS position_text, rank FROM f1.main.results), status_descriptions AS (SELECT statusId AS status_id, status AS status_desc FROM f1.main.status), position_descriptions AS (SELECT * FROM f1.main.position_descriptions), final AS (SELECT r.status_id, r.race_id, r.driver_id, r.constructor_id, r.result_id, r.grid, r.position_order, r.points, r.laps, r.fastest_lap_time, r.fastest_lap_speed, r.lap_time, r.lap_milliseconds, r.lap_number, r.fastest_lap, r."position", r.rank, s.status_desc, p.position_desc FROM results AS r LEFT JOIN position_descriptions AS p USING (position_text) LEFT JOIN status_descriptions AS s USING (status_id))SELECT * FROM final;;
CREATE VIEW stg_f1_dataset__seasons AS WITH source AS (SELECT * FROM f1.main.seasons), renamed AS (SELECT "year", url FROM source)SELECT * FROM renamed;;
CREATE VIEW stg_f1_dataset__status AS WITH source AS (SELECT * FROM f1.main.status), renamed AS (SELECT statusid, status FROM source)SELECT * FROM renamed;;

